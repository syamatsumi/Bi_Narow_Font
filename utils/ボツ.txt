
# 輪郭の右辺だけを引き延ばします。
# 逆方向の輪郭は左辺が縮小します。
# ys_expand_Xweight(glyph, offset)
from .ys_fontforge_widestroke import ys_expand_Xweight

# 各スタイルを表すブール値を受け取り、fsSelectionの値を計算する関数。
# この関数では引数の順序がビットの並びと異なるので注意すること。
# (利用する気の無いパラメーターが多くてね……)
def build_fsSelection(
    wws=True,           # WWSファミリー（Weight-Width-Slope）
    regular=False,      # レギュラースタイル
    bold=False,         # ボールドスタイル
    italic=False,       # イタリックスタイル
    underscore=False,   # 下線入りスタイル
    negative=False,     # 地黒白抜きのスタイル
    outlined=False,     # ワイヤーフレーム的なスタイル
    strikeout=False,    # 打消し線スタイル
    use_metrics=False,  # OS/2テーブルのTypo Metricsを使用する
    oblique=False       # 疑似イタリック体スタイル
):

    # 各ビットの定義
    ITALIC =      0b0000000000000001
    UNDERSCORE =  0b0000000000000010
    NEGATIVE =    0b0000000000000100
    OUTLINED =    0b0000000000001000
    STRIKEOUT =   0b0000000000010000
    BOLD =        0b0000000000100000
    REGULAR =     0b0000000001000000
    USE_METRICS = 0b0000000010000000
    WWS =         0b0000000100000000
    OBLIQUE =     0b0000001000000000

    # 各ビットを組み立てる。
    fs_selection = 0b0000000000000000
    if italic:
        fs_selection |= ITALIC
    if underscore:
        fs_selection |= UNDERSCORE
    if negative:
        fs_selection |= NEGATIVE
    if outlined:
        fs_selection |= OUTLINED
    if strikeout:
        fs_selection |= STRIKEOUT
    if bold:
        fs_selection |= BOLD
    if regular:
        fs_selection |= REGULAR
    if use_typo_metrics:
        fs_selection |= USE_TYPO_METRICS
    if wws:
        fs_selection |= WWS
    if oblique:
        fs_selection |= OBLIQUE

    return fs_selection
    
    
    
    

# ベクトルが上方向にあるパスを右にオフセットする
def ys_expand_Xweight(glyph, offset):
    # 0除算回避のため整数化、重複削除を実施
    glyph.round()
    glyph.removeOverlap()

    # 作業面を保存してレイヤをカラに
    glyph_backup = [contour.dup() for contour in glyph.foreground]
    glyph.foreground = fontforge.layer()

    # コンターを加工して吐き出す。
    wroking_contour = fontforge.contour(True)
    contour_processe = []
    for contour in glyph_backup:
        working_contour = contour.dup()
        # ベクトルの向きが変わる箇所に点を追加
        ys_insert_point_on_turn(working_contour)
        glyph.foreground += working_contour
        # 上向きのベクトル(CCWパスの右側)をオフセット処理
        # ys_upper_vector_offsetter(working_contour, offset)
        # 処理が済んだパスを保存。
        # contour_processe += working_contour
        
    return



# 上下方向ベクトルの向きが変わる箇所に点を追加
def ys_insert_point_on_turn(contour):
    new_contour = fontforge.contour(True)
    current_point = fontforge.contour(True)
    num_points = len(contour)

    # 全てのポイントのインデックスを取得
    point_indices = list(range(num_points))
    i = 0
    while i < num_points:
        idx = i
        current_point = contour[idx]

        # ポイントの属性を取得
        # 'move', 'line', 'curve', 'qcurve', 'offcurve'など
        point_type = current_point.type

        # オフカーブポイントは保存だけして次へ
        if point_type == 'offcurve':
            new_contour += current_point.dup()
            i += 1
            continue

        # 前後のポイントを取得（オフカーブポイントをスキップ）
        prev_idx = (idx - 1) % num_points
        while contour[prev_idx].type == 'offcurve':
            prev_idx = (prev_idx - 1) % num_points
            if prev_idx == idx:
                break  # 無限ループ防止

        next_idx = (idx + 1) % num_points
        while contour[next_idx].type == 'offcurve':
            next_idx = (next_idx + 1) % num_points
            if next_idx == idx:
                break  # 無限ループ防止

        prev_point = contour[prev_idx]
        next_point = contour[next_idx]

        # ベクトルを計算
        vector1 = (
            current_point.x - prev_point.x,
            current_point.y - prev_point.y,
        )
        vector2 = (
            next_point.x - current_point.x,
            next_point.y - current_point.y,
        )
        # 折り返し、折れ曲がりがあるポイント
        if is_direction_changed(vector1, vector2):
            new_contour += current_point.dup()
            new_contour += current_point.dup()

        else:
            # 通常の点として1回取得
            new_contour += current_point.dup()
        i += 1  # 次のポイントへ進む

    # コンターを閉じる処理、最初と最後のポイントが異なる場合
    if new_contour[0] != new_contour[-1]:
        # 最初の点をコピーして末尾に追加することで実質クローズ。
        new_contour += new_contour[0].dup()

    contour = new_contour

    return 



# ベクトルのY方向が変化したかどうかを判定
def is_direction_changed(vector1, vector2):
    # 通常の反転は単純に正負の掛け算では必ず負になる性質を利用。
    # 水平線から斜線、斜線から水平線の時も拾いたいので、
    # どちらかが水平線で0の時(=乗算で0になる)
    # かつ、足し算して0じゃないなら向きの変更と見做します。
    y1, y2 = vector1[1], vector2[1]
    return (y1 * y2 < 0) or (y1 * y2 == 0 and y1 + y2 != 0)



def ys_upper_vector_offsetter(contour, offset):
    points_target = []  # 動かす対象ポイントの格納場所
    num_points = len(contour)
    point_indices = list(range(num_points))  # インデックス取得

    i = 0
    while i < num_points:
        idx = i
        current_point = contour[idx]
        point_type = current_point.type  # ポイントの属性を取得

        # 前後のポイントを取得（オフカーブポイントをスキップ）
        prev_idx = (idx - 1) % num_points
        while contour[prev_idx].type == 'offcurve':
            prev_idx = (prev_idx - 1) % num_points
            if prev_idx == idx:
                break  # 無限ループ防止

        next_idx = (idx + 1) % num_points
        while contour[next_idx].type == 'offcurve':
            next_idx = (next_idx + 1) % num_points
            if next_idx == idx:
                break  # 無限ループ防止

        prev_point = contour[prev_idx]
        next_point = contour[next_idx]

        # ベクトルを計算
        vector1 = (
            current_point.x - prev_point.x,
            current_point.y - prev_point.y,
        )
        vector2 = (
            next_point.x - current_point.x,
            next_point.y - current_point.y,
        )

        # yが増加するか、してたポイントは全て対象。
        # このあと操作する対象をピックアップする処理なので、
        # ここは敢えての参照渡し。
        if vector1[1] > 0 or vector2[1] > 0:
            points_target.append(current_point)

        i += 1  # 次のポイントへ進む

    # 動かす対象のポイントをオフセット
    for point in points_target:
        point.x += offset  # X軸方向に移動

    return

